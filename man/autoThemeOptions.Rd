% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/render-plot.R
\name{autoThemeOptions}
\alias{autoThemeOptions}
\title{Plot auto theming options}
\usage{
autoThemeOptions(
  bg = NULL,
  fg = NULL,
  accent = NULL,
  qualitative = NULL,
  sequential = NULL
)
}
\arguments{
\item{bg}{background color (defaults to the background color of the containing
HTML element).}

\item{fg}{foreground color (defaults to the foreground color of the containing
HTML element).}

\item{accent}{color for making certain graphical markers 'stand out'
(e.g., the fitted line color for \code{\link[ggplot2:geom_smooth]{ggplot2::geom_smooth()}}).
Defaults to the hyperlink color (inside the containing HTML element).
Can be of length 2 for lattice graphics.}

\item{qualitative}{color palette for discrete variables.
Defaults to the Okabe-Ito colorscale (won't be used in ggplot2 when
the number of data levels exceeds the max allowed colors).}

\item{sequential}{color palette for numeric variables.
Defaults to a gradient based on \code{accent} color.}
}
\description{
Create a list of options for passing to \code{\link[=renderPlot]{renderPlot()}}'s \code{autoTheme}
argument (either directly or through \code{\link[=shinyOptions]{shinyOptions()}}' \code{plot.autotheme}).
This function helps you:
\enumerate{
\item Override auto-theming defaults, which is especially useful for
\code{qualitative} and/or \code{sequential} color palettes.
\item Opt-out of particular auto-theming features (by supplying \code{NA} to specific
option(s)).
}
}
\details{
Options may also be reactive values which, when invalidated, trigger a redraw for
any plots that depend on those values.
}
\examples{

library(ggplot2)

p <- ggplot(diamonds[sample(nrow(diamonds), 1000), ], aes(carat, price)) +
  geom_point(alpha = 0.2) +
  geom_smooth() +
  facet_wrap(~cut) + ggtitle("Diamond price by carat and cut")

base_colors <- tags$style(HTML("body{background-color:#444; color:#e4e4e4}"))

if (interactive()) {
  shinyApp(
    fluidPage(base_colors, plotOutput("p")),
    function(input, output, session) {
      shinyOptions(plot.autotheme = TRUE)
      output$p <- renderPlot(p)
    }
  )
}

if (interactive()) {
  shinyApp(
    fluidPage(
      base_colors,
      selectInput(
        "accent_color", "Select an accent color",
        colors(), selected = "darkred"
      ),
      plotOutput("p")
    ),
    function(input, output, session) {
      # Options could also be set globally via shinyOptions()
      opts <- autoThemeOptions(accent = reactive(input$accent_color))
      output$p <- renderPlot(p, autoTheme = opts)
    }
  )
}


}
